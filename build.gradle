plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "org.asciidoctor.convert" version "1.5.10"
//	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'java'
}

group = 'com.firefighter'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}


jar {
	enabled = false
}

dependencies {
	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	compileOnly 'org.projectlombok:lombok'
	implementation 'org.postgresql:postgresql:42.1.4'
	implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.1'
	compile 'org.springframework.boot:spring-boot-starter-webflux'

	compile('io.jsonwebtoken:jjwt-api:0.11.1')
	runtime('io.jsonwebtoken:jjwt-impl:0.11.1', 'io.jsonwebtoken:jjwt-jackson:0.11.1')


	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.assertj:assertj-core:3.22.0'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.h2database:h2'
	testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '3.2.0'
	implementation group: 'org.json', name: 'json', version: '20090211'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'

	//FCM
	implementation 'com.google.firebase:firebase-admin:9.0.0'

}


asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}


task copyDocument(type: Copy) {
	dependsOn asciidoctor

	from file("build/asciidoc/html5")
	into file("src/main/resources/static/docs")
}

bootJar {
	dependsOn asciidoctor
	copy {
		from "${asciidoctor.outputDir}"
		into 'BOOT-INF/classes/static/docs'
	}
}

build {
	dependsOn copyDocument
}