# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

# Repo Action 페이지에 나타날 이름 
name: Spring Boot & Gradle CI/CD

# Event Trigger
# master branch에 push 또는 pull request가 발생할 경우 동작
# branch 단위 외에도, tag나 cron 식 등을 사용할 수 있음
on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
     
      - name: env파일 생성     
        run: |
          cd ./src/main/resources/
          touch ./env.properties
          echo "IMAGE_ACCESS_KEY=$IMAGE_ACCESS_KEY" >> ./env.properties
          echo "IMAGE_SECRET_KEY=$IMAGE_SECRET_KEY" >> ./env.properties
          cat env.properties
        shell: bash
        env:
          IMAGE_ACCESS_KEY: ${{ secrets.AWS_IMAGE_ACCESS_KEY }}
          IMAGE_SECRET_KEY: ${{ secrets.AWS_IMAGE_SECRET_KEY }}

      - name: firebase.json 생성
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: "firebase_service_key.json"
          json: ${{ secrets.FIREBASE_SERVICE_KEY }}
          dir: 'src/main/resources/'

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build --info

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir dev

      # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./dev

      # appspec.yml Copy
      - name: Copy appspec
        run: cp appspec.yml ./dev
        
      # script file Copy
      - name: Copy shell
        run: cp ./scripts/* ./dev

      # 압축파일 형태로 전달
      - name: Make zip file
        run: zip -r -qq -j ./aenitto-dev-build.zip ./dev

      # S3 Bucket으로 copy
      - name: Deliver to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          --acl private \
          ./aenitto-dev-build.zip s3://aenitto-deploy/
          
      # Deploy
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws deploy create-deployment \
          --application-name aenitto-dev \
          --deployment-group-name aenitto-dev-deploy-group \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=aenitto-deploy,bundleType=zip,key=aenitto-dev-build.zip \
          --region ap-northeast-2
