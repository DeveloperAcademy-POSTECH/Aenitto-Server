# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

# Repo Action 페이지에 나타날 이름 
name: Spring Boot & Gradle CI/CD

# Event Trigger
# master branch에 push 또는 pull request가 발생할 경우 동작
# branch 단위 외에도, tag나 cron 식 등을 사용할 수 있음
on:
  push:
    branches: [ develop, feature/6-continuous-deploy-setting ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        
#         - name: make email_pwd.properties
#         if: contains(github.ref, 'main')
#         run: |
#           echo "ls -a . & pwd"
#           pwd
#           ls -a .
#           echo "mkdir & touch"
#           mkdir -p ./src/main/resources 
#           cd ./src/main/resources
#           touch ./email_pwd.properties
#           pwd
#           ls -a .
#           echo "copy properties"
#           echo $DEV_PROP >> ./email_pwd.properties
#           cat email_pwd.properties
#         shell: bash
#         env:
#           DEV_PROP: ${{ secrets.EMAIL_PASSWORD }}
# 출처: https://determination.tistory.com/entry/Github-Actions로-properties-파일-만들어서-배포하기 [내삶발전기록용:티스토리] 


#   - name: Restore gradle.properties
#     env:
#       GRADLE_PROPERTIES: ${{ secrets.GRADLE_PROPERTIES }}
#     shell: bash
#     run: |
#       mkdir -p ~/.gradle/
#       echo "::set-env name=GRADLE_USER_HOME::$HOME/.gradle"
#       echo ${GRADLE_PROPERTIES} > ~/.gradle/gradle.properties

# Github Repository Secrets를 통해 환경 변수 파일을 생성합니다.
#       - name: Generate Environment Variables File for Production
#         run: |
#           echo "REACT_APP_DOMAIN=$REACT_APP_DOMAIN" >> .env.production
#           echo "REACT_APP_DEBUG=$REACT_APP_DEBUG" >> .env.production
#         env:
#           REACT_APP_DOMAIN: ${{ secrets.REACT_APP_DOMAIN }}
#           REACT_APP_DEBUG: ${{ secrets.REACT_APP_DEBUG }}
      
      
      # properties파일에 secret key넣기
      - name: Generate Environment Variables File for Production
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/test/resources/application.yml
        env:
          cloud.aws.credentials.access-key: ${{ secrets.AWS_IMAGE_ACCESS_KEY }}
          cloud.aws.credentials.secret-key: ${{ secrets.AWS_IMAGE_SECRET_KEY }}
        
          
#         run: |
#           cd ./src/test/resources/
#           touch ./application.yml
# #          echo "IMAGE_ACCESS_KEY=$IMAGE_ACCESS_KEY >> ./env.properties
# #          echo "IMAGE_SECRET_KEY=$IMAGE_SECRET_KEY >> ./env.properties
# #          cat env.properties
#         shell: bash
#         env:
#           IMAGE_ACCESS_KEY: ${{ secrets.AWS_IMAGE_ACCESS_KEY }}
#           IMAGE_SECRET_KEY: ${{ secrets.AWS_IMAGE_SECRET_KEY }}
          
      # Build
      - name: Build with Gradle
        run: ./gradlew clean build --info

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy

      # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/

      # appspec.yml Copy
      - name: Copy appspec
        run: cp appspec.yml ./deploy/
        
      # script file Copy
      - name: Copy shell
        run: cp ./scripts/* ./deploy/

      # 압축파일 형태로 전달
      - name: Make zip file
        run: zip -r -qq -j ./aenitto-build.zip ./deploy

      # S3 Bucket으로 copy
      - name: Deliver to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          --acl private \
          ./aenitto-build.zip s3://aenitto-deploy/
          
      # Deploy
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws deploy create-deployment \
          --application-name aenitto-api \
          --deployment-group-name aenitto-deploy-group \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=aenitto-deploy,bundleType=zip,key=aenitto-build.zip \
          --region ap-northeast-2
